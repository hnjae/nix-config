#!/usr/bin/env bash

set -euo pipefail

ZFS_HOLD_TAG="rustic-in-progress"

zfs_cmd='/run/booted-system/sw/bin/zfs'
[ -f "$zfs_cmd" ] || zfs_cmd="$(command -v zfs 2>/dev/null)" || zfs_cmd=""

_date="$(date --utc '+%Y%m%dT%H%M%SZ')"
_random="$(pwgen --no-capitalize --secure 6 1)"
id_="${_date}-${_random}"
declare -A dataset_mountpoint
snapshot_name="_rustic_${id_}"
profile=""
ignore_file=""
dry_run=false
keep=false
debug=false

usage() {
  cat <<EOF
Usage: $(basename -- "$0") [-n] [-f] [-d] [-k] [-i ignore_file] -p <profile> [--] <dataset>...
       $(basename -- "$0") -h

ZFS dataset backup tool using rustic

Arguments:
  <dataset>         ZFS dataset to backup (e.g., pool/data)

Options:
  -n                Perform a dry run without making changes in rustic repository
  -d                Print debug information
  -k                Keep the ZFS snapshot after backup (Will use \`rustic_\` prefix)
  -i <ignore_file>  Custom ignore file path (Uses .gitignore style)
  -p <profile>      Rustic profile name (without .toml extension)
  -h                Show this help message
EOF
  exit 1
}

while getopts ":i:p:nkdh" opt; do
  case ${opt} in
  h)
    usage
    ;;
  n)
    dry_run=true
    ;;
  k)
    keep=true
    ;;
  d)
    debug=true
    ;;
  i)
    ignore_file=$OPTARG
    ;;
  p)
    profile=$OPTARG
    ;;
  \?)
    echo "Invalid Option: -$OPTARG" 1>&2
    usage
    ;;
  :)
    echo "Invalid Option: -$OPTARG requires an argument" 1>&2
    usage
    ;;
  esac
done
shift $((OPTIND - 1))
datasets=("$@")

[ "${#datasets[@]}" -eq 0 ] && usage
[ "$profile" == "" ] && usage

check_cond() {
  if [ "$UID" != 0 ]; then
    echo "[ERROR] This script must be run as root." >&2
    exit 1
  fi

  if [ ! -f "${profile}.toml" ]; then
    echo "[ERROR] ${profile}.toml does not exists." >&2
    exit 1
  fi

  if [ ! -f "$zfs_cmd" ]; then
    echo "[ERROR] $zfs_cmd does not exists." >&2
    exit 1
  fi

  for dataset in "${datasets[@]}"; do
    local mp
    mp="$("$zfs_cmd" get -H -o value mountpoint -- "$dataset")"

    if [ "$mp" == "" ]; then
      echo "[ERROR] Could not get the mountpoint of dataset $dataset." >&2
      exit 1
    fi

    if [ "$mp" == "none" ]; then
      echo "[ERROR] The mountpoint of dataset $dataset is $mp. This dataset cannot be processed." >&2
      exit 1
    fi

    if [ "$mp" == "legacy" ]; then
      "$debug" && echo "[DEBUG] The mountpoint of dataset $dataset is legacy. Using findmnt to get the mountpoint." >&2
      mp="$(findmnt --types=zfs --source="$dataset" --output TARGET --noheadings)"
    fi

    dataset_mountpoint["$dataset"]="$mp"
  done
}

cleanup_snapshots() {
  local snapshots_to_cleanup
  readarray -t snapshots_to_cleanup < <(
    "$zfs_cmd" list -t snapshot --json -- "${datasets[@]}" 2>/dev/null | jq -r '
      .datasets[]? |
      select(.snapshot_name | startswith("_rustic_")) |
      .name
    ' 2>/dev/null || true
  )

  local failed=false
  for snapshot in "${snapshots_to_cleanup[@]}"; do
    echo "[INFO] Destroying ZFS snapshot: $snapshot" >&2

    if "$zfs_cmd" release "$ZFS_HOLD_TAG" -- "$snapshot" 2>/dev/null; then
      echo "[INFO] Released the hold on ZFS snapshot: $snapshot" >&2
    else
      echo "[WARN] Failed to release hold on ZFS snapshot: $snapshot" >&2
    fi

    if "$zfs_cmd" destroy -- "$snapshot"; then
      echo "[INFO] Destroyed ZFS snapshot: $snapshot" >&2
    else
      echo "[ERROR] Failed to destroy ZFS snapshot: $snapshot" >&2
      failed=true
    fi
  done

  if "$failed"; then
    exit 1
  fi
}

run_backup() {
  if "$debug"; then
    export RCLONE_VERBOSE="1"
  fi

  export RCLONE_MULTI_THREAD_STREAMS="${RCLONE_MULTI_THREAD_STREAMS:-2}" # defaults : 4
  # export RUSTIC_REPO_OPT_TIMEOUT="${RUSTIC_REPO_OPT_TIMEOUT:-"10min"}"
  export RUSTIC_LOG_LEVEL="${RUSTIC_LOG_LEVEL:-"info"}"
  export RCLONE_VERBOSE="${RCLONE_VERBOSE:-1}"

  local snapshot
  local dataset
  local snapshot_unixtime
  local snapshot_time
  local snapshot_dir

  dataset="$1"
  snapshot="${dataset}@${snapshot_name}"
  snapshot_unixtime="$("$zfs_cmd" get -H -p creation -o value -- "$snapshot")"
  snapshot_time="$(date --date="@${snapshot_unixtime}" --utc '+%Y-%m-%dT%H:%M:%SZ')"
  snapshot_dir="${dataset_mountpoint[$dataset]}/.zfs/snapshot/${snapshot_name}"

  local rustic_backup_args=(
    backup
    --ignore-devid # NOTE: devid 는 ZFS snapshot 에 따라 다름.
    --one-file-system
    --git-ignore
    "--tag=${id_}"
    # --no-require-git
    "--exclude-if-present=CACHEDIR.TAG"
    "--group-by=label" # zfs dataset 명이 label 이 되는데, 이것만을 기준점으로 삼자.
    "--as-path=/"
    "--use-profile=${profile}"
    "--no-progress" # 가끔 zombie 프로세스가 되는 경우가 있는데 no-progress 하면 안 그런 듯.  <2025-07-27>
    "--no-scan"     # progress 안보이니 scan 을 할 필요가 없음.
    "--json"        # 출력 결과 json 으로 (`--long` 대신 사용)
  )

  if [ "$ignore_file" != "" ]; then
    rustic_backup_args+=("--custom-ignorefile=${ignore_file}")
  fi

  if "$dry_run"; then
    rustic_backup_args+=("--dry-run")
  fi

  rustic_backup_args+=(
    "--label=${dataset}"
    "--time=${snapshot_time}"
    "--"
    "$snapshot_dir"
  )

  [ -d "$snapshot_dir" ] && rustic "${rustic_backup_args[@]}" </dev/null

  # Cleanup
  "$zfs_cmd" release "$ZFS_HOLD_TAG" -- "$snapshot" &&
    echo "[INFO] Released the hold on ZFS snapshot: $snapshot" >&2

  if "$keep"; then
    "$zfs_cmd" rename -- "$snapshot" "${dataset}@rustic_${id_}" &&
      echo "[INFO] Renamed ZFS snapshot: ${dataset}@rustic_${id_}" >&2
  else
    "$zfs_cmd" destroy -- "$snapshot" &&
      echo "[INFO] Destroyed ZFS snapshot: $snapshot" >&2
  fi
}

main() {
  trap cleanup_snapshots EXIT

  check_cond
  cleanup_snapshots

  local -a snapshots
  local -A pools

  for dataset in "${datasets[@]}"; do
    pool="${dataset%%/*}"
    pools[$pool]+="${dataset}@${snapshot_name}"$'\n'
    snapshots+=("${dataset}@${snapshot_name}")
  done

  for pool in "${!pools[@]}"; do
    local pool_snapshots
    readarray -d $'\n' -t pool_snapshots <<<"${pools[$pool]}"

    # 마지막 원소가 빈 문자열이면 제거
    if [ "${#pool_snapshots[@]}" -gt 0 ] && [ "${pool_snapshots[-1]}" = "" ]; then
      unset 'pool_snapshots[-1]'
    fi

    if "$zfs_cmd" snapshot -- "${pool_snapshots[@]}"; then
      echo "[INFO] Created ZFS snapshot(s): ${pool_snapshots[*]}" >&2
    else
      echo "[ERROR] Failed to create ZFS snapshot(s): ${pool_snapshots[*]}" >&2
      exit 1
    fi
  done

  if "$zfs_cmd" hold "$ZFS_HOLD_TAG" -- "${snapshots[@]}"; then
    echo "[INFO] Created hold(s) on ZFS snapshot(s): " "${snapshots[@]}" >&2
  else
    echo "[ERROR] Failed to create hold(s) on ZFS snapshot(s): " "${snapshots[@]}" >&2
  fi

  for dataset in "${datasets[@]}"; do
    echo "[INFO] Processing backup on dataset: $dataset" >&2
    run_backup "$dataset"
  done
}

main
