#!/bin/sh

# Requires:
#   pistol
# Sixel Optional Dependencies:
#   crc32, chafa, imagemagick, rsvg-convert

HORIZONTAL_POS="$4"
IMG_CACHE_WIDTH=1800
IMG_CACHE_HEIGH=2160
IMG_CACHE_SIZE="${IMG_CACHE_WIDTH}x${IMG_CACHE_HEIGH}"

is_lf_preview_pane=1
if [ "$HORIZONTAL_POS" = "" ]; then
  is_lf_preview_pane=0
fi

is_sixel_available() {
  if [ "$TERM" = "tmux-256color" ] ||
    [ "$ZELLIJ_SESSION_NAME" != "" ]; then
    # NOTE: issue using sixel in zellij <2023-04-30>
    echo 0
    return
  fi

  if [ "$TERM" = "foot" ] ||
    [ "$TERM_PROGRAM" = "WezTerm" ] ||
    [ "$TERM" = "contour" ]; then
    echo 1
    return
  fi

  if [ "$TERM" = "tmux-256color" ] ||
    [ "$TERM" = "xterm-kitty" ] ||
    [ "$TERM" = "Linux" ] ||
    [ "$KONSOLE_VERSION" != "" ] ||
    [ "$ALACRITTY_WINDOW_ID" != "" ]; then
    # NOTE: Issue using sixel in konsole <2023-04-28>
    echo 0
    return
  fi

  echo 0
}

is_kitty_available() {
  if ([ "$TERM_PROGRAM" = "ghostty" ] && command -v kitten >/dev/null 2>&1) ||
    [ "$TERM" = "xterm-kitty" ]; then
    echo 1
    return
  fi

  echo 0
}

is_img_under_cache() {
  case "$1" in
  "${XDG_CACHE_HOME}/lf/"*)
    echo 1
    return
    ;;
  esac

  echo 0
}

get_img_cache_path() {
  filepath="$1"
  [ ! -d "${XDG_CACHE_HOME}/lf" ] && mkdir -p "${XDG_CACHE_HOME}/lf"

  if ! command -v crc32 >/dev/null 2>&1; then
    echo "crc32 not installed"
    exit 1
  fi

  echo "${XDG_CACHE_HOME}/lf/thumbnail.$(
    stat --printf "%i\0%F\0%s\0%W\0%Y" -- "$filepath" |
      crc32
  ).jpg"
}

generate_img_cache() {
  src="$1"
  dst="$(get_img_cache_path "$src")"

  if [ -f "$dst" ]; then
    echo "$dst"
    return
  fi

  magick \
    "$src" \
    -auto-orient \
    -resize "${IMG_CACHE_SIZE}" \
    -quality 70 \
    "$dst" >/dev/null 2>&1

  # -resize "${IMG_CACHE_SIZE}\>" \

  echo "$dst"
}

is_img_small() {
  filepath="$1"
  dimensions=$(identify -format "%w %h" "$filepath" 2>/dev/null)
  width=$(echo "$dimensions" | awk '{print $1}')
  height=$(echo "$dimensions" | awk '{print $2}')

  if [ "$width" -lt "1200" ] && [ "$height" -lt "1800" ]; then
    echo 1
    return
  fi

  echo 0
}

draw_img_kitten() {
  filepath="$1"
  width="${2}"
  height="${3}"
  x="$4"
  y="$5"

  # NOTE: kitten 이 Orientation 이 들어가 있는 이미지 잘 처리하는지 확인 필요 <2025-02-09>
  # [ "$(exiftool -Orientation -n -- "$filepath" | awk '{print $NF}')" -gt 1 ]; then
  img_path="$filepath"
  if [ "$(is_img_under_cache "$filepath")" -eq 0 ]; then
    case "$(file -L --brief --mime-type -- "$filepath")" in
    image/tiff)
      # NOTE: SVG - supported by kitten but to resize image
      img_path=$(generate_img_cache "$filepath")
      ;;
    image/svg+xml)
      img_path=$(get_img_cache_path "$filepath")
      if [ ! -f "$img_path" ]; then
        rsvg-convert --width="$IMG_CACHE_WIDTH" --height="$IMG_CACHE_HEIGH" --keep-aspect-ratio -- "$filepath" >"$img_path"
      fi
      ;;
    image/*)
      if [ "$(is_img_small "$filepath")" -eq 1 ]; then
        img_path=$(generate_img_cache "$filepath")
      fi
      ;;
    esac
  fi

  kitten icat --stdin no --transfer-mode memory --place "${width}x${height}@${x}x${y}" "$img_path" </dev/null >/dev/tty
}

draw_img_chafa() {
  filepath="$1"
  width="${2}"
  height="${3}"

  img_path="$filepath"
  if [ "$(is_img_under_cache "$filepath")" -eq 0 ]; then
    case "$(file -L --brief --mime-type -- "$filepath")" in
    image/heic | \
      image/avif | \
      image/jxl | \
      image/bmp | \
      image/tiff | \
      image/svg+xml | \
      image/x-xpixmap)
      img_path=$(generate_img_cache "$filepath")
      ;;
    esac
  fi

  if [ "$(is_sixel_available)" -eq 0 ]; then
    chafa -f symbols -s "${width}x${height}" --animate off --polite on "$img_path"
    return
  fi

  chafa -f sixel -s "${width}x${height}" --animate off --polite on "$img_path"
}

main() {
  filepath="$1"
  # width=$(("${2:-"$(tput cols)"}" - 2))
  # height="${3:-"$(("$(tput lines)" - 1))"}"
  width="$2"
  height="$3"
  x="$4"
  y="$5"

  case "$(xdg-mime query filetype "$filepath")" in
  inode/directory)
    if [ -f "$filepath/cover.jpg" ]; then
      filepath="$filepath/cover.jpg"
      if [ "$is_lf_preview_pane" -eq 1 ] && [ "$(is_kitty_available)" -eq 1 ]; then
        draw_img_kitten "$filepath" "$width" "$height" "$x" "$y"
        exit 1
      fi

      if [ "$is_lf_preview_pane" -eq 1 ]; then
        draw_img_chafa "$filepath" "$width" "$height"
        exit 0
      fi
    fi
    ;;
  image/vnd.microsoft.icon)
    # image preview not supported
    ;;
  application/vnd.comicbook-rar | \
    application/vnd.comicbook+zip | \
    application/x-cb7 | \
    application/x-cbr | \
    application/x-cbt | \
    application/x-cbz | \
    application/x-ext-cb7 | \
    application/x-ext-cbr | \
    application/x-ext-cbt | \
    application/x-ext-cbz | \
    application/x-ext-djv | \
    application/x-ext-djvu | \
    image/vnd.djvu | \
    application/pdf | \
    application/x-bzpdf | \
    application/x-ext-pdf | \
    application/x-gzpdf | \
    application/x-xzpdf | \
    application/postscript | \
    application/x-bzpostscript | \
    application/x-gzpostscript | \
    application/x-ext-eps | \
    application/x-ext-ps | \
    image/x-bzeps | \
    image/x-eps | \
    image/x-gzeps | \
    application/oxps | \
    application/vnd.ms-xpsdocument | \
    application/illustrator)
    if [ "$is_lf_preview_pane" -eq 1 ] &&
      command -v papers-thumbnailer >/dev/null 2>&1; then
      img_path=$(get_img_cache_path "$filepath")
      if [ ! -f "$img_path" ]; then
        papers-thumbnailer -s "$IMG_CACHE_HEIGH" "$filepath" "$img_path"
      fi

      if [ "$(is_kitty_available)" -eq 1 ]; then
        draw_img_kitten "$img_path" "$width" "$height" "$x" "$y"
        exit 1
      fi

      draw_img_chafa "$img_path" "$width" "$height"
      exit 0
    fi
    ;;
  application/epub+zip)
    if [ "$is_lf_preview_pane" -eq 1 ] &&
      command -v epub-thumbnailer >/dev/null 2>&1; then
      img_path=$(get_img_cache_path "$filepath")

      if [ ! -f "$img_path" ]; then
        if command -v gnome-epub-thumbnailer >/dev/null 2>&1; then
          gnome-epub-thumbnailer -s "$IMG_CACHE_HEIGH" "$filepath" "$img_path"
        else
          epub-thumbnailer "$filepath" "$img_path" "$IMG_CACHE_HEIGH"

          if [ "$(is_img_small "$img_path")" -eq 1 ]; then
            magick \
              "$img_path" \
              -auto-orient \
              -resize "${IMG_CACHE_SIZE}" \
              -quality 70 \
              "$img_path" >/dev/null 2>&1
          fi
        fi
      fi

      if [ "$(is_kitty_available)" -eq 1 ]; then
        draw_img_kitten "$img_path" "$width" "$height" "$x" "$y"
        exit 1
      fi

      draw_img_chafa "$img_path" "$width" "$height"
      exit 0
    fi
    ;;

  application/x-mobipocket-ebook)
    # *.azw3 *.mobi
    if [ "$is_lf_preview_pane" -eq 1 ] &&
      command -v gnome-mobi-thumbnailer >/dev/null 2>&1; then

      img_path=$(get_img_cache_path "$filepath")
      if [ ! -f "$img_path" ]; then
        gnome-mobi-thumbnailer -s "$IMG_CACHE_HEIGH" "$filepath" "$img_path"
      fi

      if [ "$(is_kitty_available)" -eq 1 ]; then
        draw_img_kitten "$img_path" "$width" "$height" "$x" "$y"
        exit 1
      fi

      draw_img_chafa "$img_path" "$width" "$height"
      exit 0
    fi
    ;;

  image/*)
    if [ "$is_lf_preview_pane" -eq 1 ] && [ "$(is_kitty_available)" -eq 1 ]; then
      draw_img_kitten "$filepath" "$width" "$height" "$x" "$y"
      exit 1
    fi

    if [ "$is_lf_preview_pane" -eq 1 ]; then
      draw_img_chafa "$filepath" "$width" "$height"
      exit 0
    fi
    ;;
  esac

  pistol "$filepath"
}

if ! command -v xdg-mime >/dev/null 2>&1; then
  pistol "$1"
  exit 0
fi

main "$@"
