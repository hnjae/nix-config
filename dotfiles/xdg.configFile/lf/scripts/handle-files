#!/usr/bin/env python3

# Usage: <scripts> <command> <files>

from __future__ import annotations

import os
import platform
import shutil
import subprocess
import sys
import termios
import tty
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterable
    from subprocess import CompletedProcess
    from typing import Literal

MAX_SUFFIX_LEN: Literal[5] = 5
SKIP_ASK_COMMANDS: set[str] = {"rmdir"}
PWD: Path = Path(os.environ["PWD"])


class Color:
    """Class of colors."""

    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    LIGHT_GREY = "\033[37m"
    DARK_GREY = "\033[90m"
    LIGHT_RED = "\033[91m"
    LIGHT_GREEN = "\033[92m"
    LIGHT_YELLOW = "\033[93m"
    LIGHT_BLUE = "\033[94m"
    LIGHT_MAGENTA = "\033[95m"
    WHITE = "\033[96m"

    END = "\033[0m"

    @staticmethod
    def colored(text: str, attrs: Iterable[str]) -> str:
        out = [Color.__dict__[attr.upper()] for attr in attrs]
        out.extend([text, Color.END])

        return "".join(out)


def readchar() -> str:
    # copied from https://stackoverflow.com/questions/510357/how-to-read-a-single-character-from-the-user
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch


def fx2files(arg: str) -> list[Path]:
    return [Path(path) for path in arg.split("\n")]


def create_trace(files: list[Path]) -> int:
    def rm_excute_permission(file: Path) -> None:
        mode: int = file.stat().st_mode & 0o777

        new_mode: int = 0
        for i in range(3):
            s_mode = (mode & (0o7 << (3 * i))) >> (3 * i)
            if s_mode in {1, 3, 5, 7}:
                s_mode -= 1
            new_mode += s_mode << (3 * i)

        if new_mode != mode:
            file.chmod(new_mode)

    for file in files:
        if len(file.suffix) <= MAX_SUFFIX_LEN and file.is_file():
            trace_name: str = file.stem
        else:
            trace_name = file.name
        trace_name += " DELETED"

        trace_path: Path = file.with_name(trace_name)

        if not trace_path.exists():
            trace_path.touch(mode=0o644)
            shutil.copystat(file, trace_path)
            rm_excute_permission(trace_path)

    return 0


CommandsMap: dict = {
    # command: (-ing string, subprocess-arg, Function )
    "trash": ("trashing", ["trash-put"], None),  # NOTE: no --
    "delete": ("deleting", ["rm", "-rf", "--"], None),
    "rmdir": ("rmdir-ing", ["rmdir", "--"], None),
    "trash-with-trace-file": ("trashing", ["trash-put"], create_trace),
}

if platform.system() == "Darwin":
    CommandsMap["trash"] = ("trashing", ["trash", "--"], None)


def print_files(files: list[Path]) -> None:
    for file in files:
        if file.parent == PWD:
            print(f"\t{file.name}", file=sys.stderr)
        elif file.is_relative_to(PWD):
            print(f"\t{file.relative_to(PWD)}", file=sys.stderr)
        else:
            print(f"\t{file}", file=sys.stderr)


def main(command: str, files: list[Path]) -> int:
    if len(files) == 0:
        return 0
    if command not in CommandsMap:
        return 1

    info_str, exe_arg, func = CommandsMap[command]

    if command not in SKIP_ASK_COMMANDS:
        print(
            "Confirm {} of:".format(Color.colored(info_str, ["blue", "bold"])),
            file=sys.stderr,
        )
        print_files(files)

        print("(y/Any)", file=sys.stderr)
        run: str = readchar()
        print(run)

        if run != "y":
            print(f"Not {info_str} any files.", file=sys.stderr)
            print("Press any key to continue", file=sys.stderr)
            readchar()
            return 0

    if func:
        func(files)

    exe_arg.extend([str(file) for file in files])
    proc: CompletedProcess = subprocess.run(exe_arg, check=False, cwd=PWD)

    if proc.returncode != 0:
        print("Error executing: {}".format(" ".join(exe_arg)), file=sys.stderr)
        print("Press any key to continue", file=sys.stderr)
        readchar()

    return proc.returncode

if __name__ == "__main__":
    sys.exit(main(sys.argv[1], fx2files(sys.argv[2])))
