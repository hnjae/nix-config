#!/usr/bin/env python3

from __future__ import annotations

import os
import shutil
import subprocess
import sys
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Callable


class Clipboard:
    """Class Clipboard."""

    @staticmethod
    def clips(string: str | None) -> None:
        def get_clipboard_args() -> dict:
            """Return list of clipboard argv."""
            x11_commands = {
                "xclip": {
                    "args": ["xclip", "-selection", "clipboard"],
                    "use_pipe": True,
                },
                "xsel": {
                    "args": ["xsel", "-ib"],
                    "use_pipe": True,
                },
            }

            session_type: str | None = os.environ.get("XDG_SESSION_TYPE")
            if session_type is None:
                raise Exception

            if session_type == "x11":
                for interface, command in x11_commands.items():
                    if shutil.which(interface) is None:
                        continue
                    return command

            elif session_type == "wayland":
                interface = "wl-copy"
                if shutil.which(interface) is not None:
                    return {
                        "args": ["wl-copy", "--", string],
                    }

            raise Exception

        if not string:
            return

        command = get_clipboard_args()
        if command.get("use_pipe"):
            subprocess.run(
                command["args"],
                check=True,
                input=string,
                text=True,
            )
        else:
            subprocess.run(command["args"], check=True)


def yank(mode: str, path: Path) -> str | None:
    def _get_colon(string: str) -> str | None:
        str1 = string.split(":")[-1]
        str2 = string.split("ï¼š")[-1]

        if len(str1) > len(str2):
            return str2.strip()
        if len(str1) < len(str2):
            return str1.strip()

        return None

    def _get_paren(string: str) -> str | None:
        start, end = None, None
        for idx, char in enumerate(reversed(string)):
            if end is None and char == ")":
                end = len(string) - idx - 1
            elif end is not None and char == "(":
                start = len(string) - idx - 1
                break

        if start is not None and end is not None:
            return string[start + 1 : end]
        return None

    yank_modes: dict[str, Callable] = {
        "stem": lambda p: p.stem,
        "name": lambda p: p.name,
        "dir": lambda p: str(p.parent),
        "path": lambda p: str(p.absolute()),
        "paren": lambda p: _get_paren(p.name),
        "colon": lambda p: _get_colon(p.name),
        # "contents"
        # "files"
    }

    if mode not in yank_modes:
        raise NotImplementedError

    string: str | None = yank_modes[mode](path)
    Clipboard.clips(string)

    return string


def main(argv: list[str]) -> int:
    if len(argv) != 2:  # noqa: PLR2004
        msg = "len(argv) != 2"
        print(msg)
        return 1

    cliped_string = yank(argv[0], Path(argv[1]))
    print(f"Saved to clipboard: {cliped_string}")

    return 0


if __name__ == "__main__":
    # Usage: <type> <strings>
    sys.exit(main(sys.argv[1:]))
