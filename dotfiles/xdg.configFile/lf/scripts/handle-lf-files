#!/usr/bin/env python3

# ruff: noqa: FIX002

from __future__ import annotations

import os
import re
import subprocess
import sys
from pathlib import Path
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Literal

_DUPLICATE_MARK: Literal["_"] = "_"

XDG_DATA_HOME: Path
LF_FILES: Path
PWD: Path = Path(os.environ["PWD"])

if "XDG_DATA_HOME" in os.environ:
    XDG_DATA_HOME = Path(os.environ["XDG_DATA_HOME"])
elif "HOME" in os.environ:
    XDG_DATA_HOME = Path(os.environ["HOME"], ".local", "share")
else:
    msg = "Can not find XDG_DATA_HOME"
    raise Exception(msg)

LF_FILES = XDG_DATA_HOME.joinpath("lf", "files")


def get_unique_path(path: Path) -> Path:
    if not path.exists():
        return path

    i: int = 1
    new_path: Path

    basename: str = path.stem if not path.is_dir() else path.name

    match: re.Match[str] | None = re.match(
        f"^.+(?={_DUPLICATE_MARK}\\d+$)",
        basename,
    )
    if match:
        basename = match.group(0)

    if path.is_dir():
        new_path = path.with_name(basename + f"{_DUPLICATE_MARK}{i:d}")
        while new_path.exists():
            i += 1
            new_path = path.with_name(basename + f"{_DUPLICATE_MARK}{i:d}")
    else:
        new_path = path.with_stem(basename + f"{_DUPLICATE_MARK}{i:d}")
        while new_path.exists():
            i += 1
            new_path = path.with_stem(basename + f"{_DUPLICATE_MARK}{i:d}")

    return new_path


def main(command: str) -> int:
    with LF_FILES.open(mode="r", encoding="UTF-8") as f:
        # skip first line
        mode: str = f.readline().strip()
        paths: list[Path] = [Path(file) for file in f.read().splitlines()]

    for path in paths:
        new_path: Path = get_unique_path(PWD.joinpath(path.name))

        if not path.exists():
            msg = f"{path} does not exists"
            print(msg)
            continue

        # TODO: hardlink <2022-06-05, Hyunjae Kim>
        if command == "symlink-absolute":
            new_path.symlink_to(path)

        elif command == "symlink-relative":
            # NOTE: DO NOT USE Pathlib's relative_to
            new_path.symlink_to(os.path.relpath(path, start=PWD))

        elif command == "use_lf_command" and mode == "move":
            if PWD.joinpath(path.name) == path:
                continue
            try:
                # shutil.move(path, new_path)
                path.rename(new_path)
            except Exception as e:  # noqa: BLE001
                msg = f"moving {path} failed: {e}"
                print(msg)

        elif command == "use_lf_command" and mode == "copy":
            # if path.is_dir():
            #     shutil.copytree(path, new_path, copy_function=shutil.copy2)
            # else:
            #     shutil.copy2(path, new_path)
            args = (
                "cp",
                "-i",
                "--preserve=all",
                "--reflink=auto",
                "-r",
                str(path.resolve()),
                str(new_path.resolve()),
            )
            subprocess.run(args, check=True)
        else:
            msg = f"{command}/{mode}"
            raise NotImplementedError(msg)

    return 0


if __name__ == "__main__":
    # Usage: <script> <command>

    try:
        sys.exit(main(sys.argv[1]))
    except Exception as exc:  # noqa: BLE001
        print(exc)
        # wait for user input. for user to see the error
        input("")
